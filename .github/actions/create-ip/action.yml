name: "Retrieve or create floating IP"
description: "Retrieve or create floating IP"
inputs:
  os_cloud:
    description:
      "Name of the OpenStack cloud allocation to select openstack auth settings
      defined in '.config/openstack/clouds.yaml'"
    required: true
  preferred_ip_address:
    description: "If already created and unassigned, IP address to return"
outputs:
  floating_ip_address:
    description: "Retrieved or created floating IP"
    value: ${{ steps.define_output.outputs.floating_ip_address }}
runs:
  using: "composite"
  steps:
    - name: "Retrieve unassigned floating IP"
      id: ip_retrieve_unassigned
      shell: bash
      run: |
        source ~/venv/bin/activate

        json_output=$(openstack floating ip list -f json | jq 'map(select(.Port == null))')
        echo "Filtered JSON Output:"
        echo "$json_output" | jq

        if [[ -n "${{ inputs.preferred_ip_address }}" ]]; then
          floating_ip=$(echo "$json_output" | jq -r --arg ip "${{ inputs.preferred_ip_address }}" \
            'map(select(."Floating IP Address" == $ip)) | if length > 0 then .[0] else null end')
        else
          floating_ip=$(echo "$json_output" | jq -r 'if length > 0 then .[0] else null end')
        fi

        floating_ip_address=$(echo "$floating_ip" | jq -r '."Floating IP Address" // empty')
        floating_ip_uuid=$(echo "$floating_ip" | jq -r '."ID" // empty')

        echo "floating_ip_address [$floating_ip_address]"
        echo "floating_ip_address=$floating_ip_address" >> $GITHUB_OUTPUT

        echo "floating_ip_uuid [$floating_ip_uuid]"
        echo "floating_ip_uuid=$floating_ip_uuid" >> $GITHUB_OUTPUT
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}

    - name: "Create floating IP"
      if: ${{ steps.ip_retrieve_unassigned.outputs.floating_ip_address == '' }}
      id: ip_create
      shell: bash
      run: |
        source ~/venv/bin/activate

        json_output=$(openstack floating ip create public -f json)
        echo "Floating IP Creation Output:"
        echo "$json_output"

        floating_ip_uuid=$(
          echo $json_output |
          jq -r ".id"
        )
        echo "floating_ip_uuid [$floating_ip_uuid]"
        echo "floating_ip_uuid=$floating_ip_uuid" >> $GITHUB_OUTPUT

        floating_ip_address=$(
          echo $json_output |
          jq -r ".floating_ip_address"
        )
        echo "floating_ip_address [$floating_ip_address]"
        echo "floating_ip_address=$floating_ip_address" >> $GITHUB_OUTPUT
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}

    - name: "Define output"
      id: define_output
      shell: bash
      run: |
        echo "RETRIEVED_FLOATING_IP_ADDRESS [$RETRIEVED_FLOATING_IP_ADDRESS]"
        echo "RETRIEVED_FLOATING_IP_UUID [$RETRIEVED_FLOATING_IP_UUID]"
        echo "CREATED_IP_ADDRESS [$CREATED_IP_ADDRESS]"
        echo "CREATED_IP_UUID [$CREATED_IP_UUID]"
        if [[ -n "$RETRIEVED_FLOATING_IP_ADDRESS" ]]; then
          echo "floating_ip_address=$RETRIEVED_FLOATING_IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "floating_ip_uuid=$RETRIEVED_FLOATING_IP_UUID" >> $GITHUB_OUTPUT
        elif [[ -n "$CREATED_IP_ADDRESS" ]]; then
          echo "floating_ip_address=$CREATED_IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "floating_ip_uuid=$CREATED_IP_UUID" >> $GITHUB_OUTPUT
        else
          echo "::error ::Failed to either retrieve or create a floating IP."
          exit 1
        fi
      env:
        RETRIEVED_FLOATING_IP_ADDRESS:
          ${{ steps.ip_retrieve_unassigned.outputs.floating_ip_address }}
        RETRIEVED_FLOATING_IP_UUID:
          ${{ steps.ip_retrieve_unassigned.outputs.floating_ip_uuid }}
        CREATED_IP_ADDRESS: ${{ steps.ip_create.outputs.floating_ip_address }}
        CREATED_IP_UUID: ${{ steps.ip_create.outputs.floating_ip_uuid }}
