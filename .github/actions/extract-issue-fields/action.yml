name: "Extract issue fields"
description: "Extract issue fields"
inputs:
  token:
    description: "GITHUB_TOKEN or repo scoped PAT"
    required: true
  repository:
    description: "The full name of the repository in which the issue exists"
    required: true
  issue_number:
    description: "Issue number identifying the issue to extract fields from"
    required: true
outputs:
  title:
    description: "Request title"
    value: ${{ steps.read_issue_title.outputs.title }}
  instance_flavor:
    description: "Instance flavor"
    value: ${{ steps.extract.outputs.instance_flavor }}
  description:
    description: "Request description"
    value: ${{ steps.extract.outputs.title }}
  orcid:
    description: "ORCID iD"
    value: ${{ steps.extract.outputs.orcid }}
  email:
    description: "Email"
    value: ${{ steps.extract.outputs.email }}
  confirm_email:
    description: "Confirm Email"
    value: ${{ steps.extract.outputs.confirm_email }}
runs:
  using: "composite"
  steps:
    - name: Fetch the issue title
      id: read_issue_title
      shell: bash
      run: |
        echo "title<<EOF" >> $GITHUB_OUTPUT
        gh issue view ${{ inputs.issue_number }} \
          --repo ${{ inputs.repository }} \
          --json title \
          --jq .title >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Fetch the issue
      id: read_issue_body
      shell: bash
      run: |
        echo "body<<EOF" >> $GITHUB_OUTPUT
        gh issue view ${{ inputs.issue_number }} \
          --repo ${{ inputs.repository }} \
          --json body \
          --jq .body >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Issue Forms Body Parser
      id: parse
      uses: zentered/issue-forms-body-parser@v2.2.0
      with:
        body: ${{ steps.read_issue_body.outputs.body }}

    - name: Display parsed data
      shell: bash
      run: |
        printf '%s\n' "$DATA" | jq -r .
      env:
        DATA: ${{ steps.parse.outputs.data }}

    - name: Extract fields
      id: extract
      shell: bash
      run: |
        instance_flavor=$(printf '%s\n' "$DATA" | \
            jq -r '."cloud-computing-instance-flavor".text | split(" - ")[0]')
        echo "instance_flavor [$instance_flavor]"
        echo "instance_flavor=$instance_flavor" >> $GITHUB_OUTPUT

        orcid=$(
          printf '%s\n' "$DATA" |
          jq -r ".orcid.text"
        )
        echo "orcid=$orcid" >> $GITHUB_OUTPUT

        description=$(
          printf '%s\n' "$DATA" |
          jq -r '.description.text'
        )
        echo "description<<EOF" >> $GITHUB_OUTPUT
        printf '%s\n' "$description" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Also strip "<" and ">" to convert from "<name@domain.org>" to "name@domain.org"
        email=$(
          printf '%s\n' "$DATA" |
          jq -r ".email.text" |
          sed -E 's/^<([^<>]+)>$/\1/'
        )
        echo "email=$email" >> $GITHUB_OUTPUT

        # Also strip "<" and ">" to convert from "<name@domain.org>" to "name@domain.org"
        confirm_email=$(
          printf '%s\n' "$DATA" |
          jq -r '."confirm-email".text // empty' |
          sed -E 's/^<([^<>]+)>$/\1/'
        )

        # If the "Confirm Email" field is missing (e.g., in older issues),
        # set confirm_email to match email to ensure compatibility.
        if [[ -z "$confirm_email" ]]; then
          confirm_email="$email"
        fi

        echo "confirm_email=$confirm_email" >> $GITHUB_OUTPUT
      env:
        DATA: ${{ steps.parse.outputs.data }}
