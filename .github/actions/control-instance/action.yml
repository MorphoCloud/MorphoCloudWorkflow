name: "Control Instance"
description: "Control Instance"
inputs:
  os_cloud:
    description:
      "Name of the OpenStack cloud allocation to select openstack auth settings
      defined in '.config/openstack/clouds.yaml'"
    required: true
  issue_number:
    description: "Issue number"
    required: true
  command_name:
    description:
      "Name of the command to execute: create, delete, shelve, unshelve"
    required: true
  instance_name_prefix:
    description: "Instance name prefix"
    required: true
  token:
    description: "GITHUB_TOKEN or repo scoped PAT"
    required: true
  string_encryption_key:
    description: "Encryption key to encode and decode the email address"
    required: true
  mail_server_username:
    description: "mail server username"
    required: true
  mail_server_password:
    description: "mail server password"
    required: true
runs:
  using: "composite"
  steps:
    - name: Validate command
      shell: bash
      run: |
        if [[ ! $COMMAND_NAME =~ ^create|delete|shelve|unshelve$ ]]; then
          echo "::error ::Unknown command name 'COMMAND_NAME'. Valid commands are 'create', 'delete', 'shelve' or 'unshelve'."
          exit 1
        fi
      env:
        COMMAND_NAME: ${{ inputs.command_name }}

    - name: Set command expected status
      id: expected_status
      shell: bash
      run: |
        if [[ $COMMAND_NAME == "shelve" ]]; then
          expected_status="SHELVED_OFFLOADED"
        elif [[ $COMMAND_NAME == "unshelve" ]]; then
          expected_status="ACTIVE"
        elif [[ $COMMAND_NAME == "create" ]]; then
          expected_status="ACTIVE"
        elif [[ $COMMAND_NAME == "delete" ]]; then
          expected_status=""
        fi
        echo "expected_status [$expected_status]"
        echo "value=$expected_status" >> $GITHUB_OUTPUT
      env:
        COMMAND_NAME: ${{ inputs.command_name }}

    - name: Define instance name
      id: define
      uses: ./.github/actions/define-instance-name
      with:
        prefix: ${{ inputs.instance_name_prefix }}
        issue_number: ${{ inputs.issue_number }}

    - name: Check instance exists
      id: check_instance
      uses: ./.github/actions/check-instance-exists
      with:
        os_cloud: ${{ inputs.os_cloud }}
        instance_name: ${{ steps.define.outputs.instance_name }}

    - name: command results comment (Instance does not exist)
      if: ${{ steps.check_instance.outputs.exists == 'false' }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed because **${{ steps.define.outputs.instance_name }}** instance does not exist.

    - name: Check if server action already in progress
      id: check_task_state
      shell: bash
      run: |
        source ~/venv/bin/activate

        task_state=$(openstack server show $INSTANCE_NAME -f json | \
          jq -r '.["OS-EXT-STS:task_state"]')

        echo "task_state [$task_state]"
        echo "task_state=$task_state" >> $GITHUB_OUTPUT

        if [[ "$task_state" != "null" ]]; then
            echo "::error ::Server action already in progress. Task state is '$task_state'."
            exit 1
        fi
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}

    - name: comment (server action already in progress)
      if: ${{ steps.check_task_state.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to be applied to **${{ steps.define.outputs.instance_name }}** instance.
          A server action is already in progress. Task state is `${{ steps.check_task_state.outputs.task_state }}`.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Check if instance has a floating IP
      if:
        ${{ steps.check_instance.outputs.exists == 'true' &&
        (inputs.command_name == 'unshelve' || inputs.command_name == 'shelve')
        }}
      id: check_instance_has_ip
      shell: bash
      run: |
        source ~/venv/bin/activate

        # Get instance floating IP
        instance_ip=$(
          openstack server show $INSTANCE_NAME -c addresses -f json | \
          jq -r '.addresses.auto_allocated_network | if length > 1 then .[1] else "" end'
        )
        echo "instance_ip [$instance_ip]"

        # Get instance internal IP (also called fixed IP)
        instance_internal_ip=$(
          openstack server show $INSTANCE_NAME -c addresses -f json | \
          jq -r '.addresses.auto_allocated_network | if length > 0 then .[0] else "" end'
        )
        echo "instance_internal_ip [$instance_internal_ip]"

        # Determine if instance already has a floating IP assigned
        if [[ -n "$instance_ip" ]]; then
          has_ip="true"
        else
          has_ip="false"
        fi
        echo "has_ip [$has_ip]"
        echo "has_ip=$has_ip" >> $GITHUB_OUTPUT

        # Check if an unassigned floating IP matches instance IP
        has_ip_assigned="false"
        if [[ "$has_ip" == "true" ]]; then
          json_output=$(openstack floating ip list -f json | jq \
            --arg fixed_ip "$instance_internal_ip" \
            --arg ip "$instance_ip" \
            'map(select(.Port != null and ."Fixed IP Address" == $fixed_ip and ."Floating IP Address" == $ip))')
          floating_ip_address=$(echo "$json_output" | jq -r 'if length > 0 then .[0]["Floating IP Address"] else "" end')

          if [[ -n "$floating_ip_address" ]]; then
            has_ip_assigned="true"
          fi
        fi

        # If previously assigned IP is not available anymore, discard it.
        if [[ "$has_ip_assigned" == "false" ]]; then
          instance_ip=""
        fi

        echo "instance_ip [$instance_ip]"
        echo "instance_ip=$instance_ip" >> $GITHUB_OUTPUT

        echo "has_ip_assigned [$has_ip_assigned]"
        echo "has_ip_assigned=$has_ip_assigned" >> $GITHUB_OUTPUT
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}

    - name: comment (failed to check instance IP)
      if: ${{ steps.check_instance_has_ip.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to be applied to **${{ steps.define.outputs.instance_name }}** instance.
          Failed to check if instance is associated with a floating IP.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Retrieve or create a floating IP
      if:
        ${{ steps.check_instance.outputs.exists == 'true' && inputs.command_name
        == 'unshelve' && steps.check_instance_has_ip.outputs.has_ip_assigned ==
        'false' }}
      id: ip_create
      uses: ./.github/actions/create-ip
      with:
        os_cloud: ${{ inputs.os_cloud }}
        preferred_ip_address:
          ${{ steps.check_instance_has_ip.outputs.instance_ip }}

    - name: comment (failed to retrieve or create floating IP)
      if: ${{ steps.ip_create.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to be applied to **${{ steps.define.outputs.instance_name }}** instance.
          Failed to retrieve or create a floating IP.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Associate floating IP with unshelved instance
      if:
        ${{ steps.check_instance.outputs.exists == 'true' && inputs.command_name
        == 'unshelve' && steps.check_instance_has_ip.outputs.has_ip_assigned ==
        'false' }}
      id: associate_ip
      shell: bash
      run: |
        source ~/venv/bin/activate

        openstack server add floating ip "$INSTANCE_NAME" "$FLOATING_IP_ADDRESS"
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        FLOATING_IP_ADDRESS: ${{ steps.ip_create.outputs.floating_ip_address }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}

    - name: comment (failed to associate floating IP with unshelved instance)
      if: ${{ steps.associate_ip.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to be applied to **${{ steps.define.outputs.instance_name }}** instance.
          Failed to associate floating IP with unshelved instance.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Execute command
      id: execute_command
      if: ${{ steps.check_instance.outputs.exists == 'true' }}
      shell: bash
      run: |
        source ~/venv/bin/activate

        openstack server $COMMAND_NAME "$INSTANCE_NAME"
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}
        COMMAND_NAME: ${{ inputs.command_name }}

    - name: command results comment (failure)
      if: ${{ steps.execute_command.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to applied to **${{ steps.define.outputs.instance_name }}** instance.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Poll instance status
      id: instance_poll
      if: ${{ steps.expected_status.outputs.value != '' }}
      shell: bash
      run: |
        source ~/venv/bin/activate

        max_wait_time=300  # Maximum wait time in seconds (300s -> 5mins)
        if [[ "$EXPECTED_STATUS" == "SHELVED_OFFLOADED" ]]; then
          max_wait_time=600  # Maximum wait time in seconds (600s -> 10mins)
        fi

        echo "Polling '$INSTANCE_NAME' status [max_wait_time=${max_wait_time}s]"

        wait_interval=5    # Interval between status checks in seconds
        total_wait_time=0

        while [ $total_wait_time -lt $max_wait_time ]; do

            status=$(openstack server show $INSTANCE_NAME -f json -c status | \
              jq -r '.status // "PENDING"')

            echo -n "status [$status]. "

            if [[ "$status" == "$EXPECTED_STATUS" ]]; then
                echo "Exiting loop."
                break
            else
                echo "Waiting for completion..."
                sleep $wait_interval
                total_wait_time=$((total_wait_time + wait_interval))
            fi
        done

        if [ $total_wait_time -ge $max_wait_time ]; then
            echo "::error ::Maximum wait time ($max_wait_time seconds) exceeded."
            exit 1
        fi

        echo "status=$status" >> $GITHUB_OUTPUT
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}
        EXPECTED_STATUS: ${{ steps.expected_status.outputs.value }}

    - name: comment (maximum wait time exceeded)
      if: ${{ steps.instance_poll.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          Maximum wait time for command `${{ inputs.command_name }}` command to complete exceeded.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Disassociate floating IP from shelved instance
      if:
        ${{ steps.check_instance.outputs.exists == 'true' && inputs.command_name
        == 'shelve' && steps.check_instance_has_ip.outputs.has_ip == 'true' &&
        steps.check_instance_has_ip.outputs.has_ip_assigned == 'true' }}
      id: disassociate_ip
      shell: bash
      run: |
        source ~/venv/bin/activate

        openstack server remove floating ip "$INSTANCE_NAME" "$FLOATING_IP_ADDRESS"
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        FLOATING_IP_ADDRESS:
          ${{ steps.check_instance_has_ip.outputs.instance_ip }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}

    - name: comment (failed to disassociate floating IP from unshelved instance)
      if: ${{ steps.disassociate_ip.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          `${{ inputs.command_name }}` command failed to be applied to **${{ steps.define.outputs.instance_name }}** instance.
          Failed to disassociate floating IP from unshelved instance.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Set instance properties
      id: set_instance_properties
      if:
        ${{ steps.check_instance.outputs.exists == 'true' && success() &&
        inputs.command_name == 'unshelve'}}
      shell: bash
      run: |
        source ~/venv/bin/activate
        # If unshelving an instance created before the MorphCloud workflow was
        # associated with a unique UUID, the following ensures the instance is
        # properly linked to the UUID specific to the MorphCloud workflow.
        #
        # The UUID below matches the one hardcoded in the "create-instance.yml"
        # workflow.
        exoClientUuid=b7b75870-ecb5-4aca-ae73-49474a7f531e
        openstack server set --property "exoClientUuid=$exoClientUuid" $INSTANCE_NAME
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ steps.define.outputs.instance_name }}

    - name: comment (failed to set instance properties)
      if: ${{ steps.set_instance_properties.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          Failed to set instance properties while unshelving.

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Send email
      id: send_email
      if:
        ${{ steps.check_instance.outputs.exists == 'true' && success()  &&
        inputs.command_name == 'unshelve' }}
      uses: ./.github/actions/send-email
      with:
        os_cloud: ${{ inputs.os_cloud }}
        token: ${{ inputs.token }}
        string_encryption_key: ${{ inputs.string_encryption_key }}
        mail_server_username: ${{ inputs.mail_server_username }}
        mail_server_password: ${{ inputs.mail_server_password }}
        instance_name: ${{ steps.define.outputs.instance_name }}
        instance_issue_number: ${{ inputs.issue_number }}

    - name: comment (failed to send email)
      if: ${{ steps.send_email.outcome == 'failure' && failure() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          ### Command Results ❌

          Failed to send connection email for instance **${{ steps.define.outputs.instance_name }}**. ${{ steps.send_email.outputs.error_message }}

          See details at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: command results comment (success)
      if: ${{ steps.check_instance.outputs.exists == 'true' && success() }}
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue_number }}
        body: |
          Instance **${{ steps.define.outputs.instance_name }}** successfully ${{ inputs.command_name }}d ✅

    - name: Update Request Status Label
      uses: ./.github/actions/update-request-status-label
      with:
        os_cloud: ${{ inputs.os_cloud }}
        token: ${{ inputs.token }}
        issue_number: ${{ inputs.issue_number }}
        instance_name: ${{ steps.define.outputs.instance_name }}
        instance_status:
          ${{ inputs.command_name == 'delete' && 'DELETED' || '' }}
