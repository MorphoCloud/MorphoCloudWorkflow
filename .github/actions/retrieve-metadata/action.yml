name: "Retrieve metadata"
description: "Retrieve instance metadata"
inputs:
  os_cloud:
    description:
      "Name of the OpenStack cloud allocation to select openstack auth settings
      defined in '.config/openstack/clouds.yaml'"
    required: true
  instance_name:
    description: "Name of the instance to retrieve metadata from"
    required: true
outputs:
  instance_ip:
    description: "Public IP associated with the instance"
    value: ${{ steps.instance_metadata.outputs.instance_ip }}
  instance_pwd:
    description: "Passphrase associated with the instance"
    value: ${{ steps.instance_metadata.outputs.instance_pwd }}
runs:
  using: "composite"
  steps:
    - name: Retrieve metadata
      id: instance_metadata
      shell: bash
      run: |
        source ~/venv/bin/activate

        echo Retrieving instance "$INSTANCE_NAME" metadata

        # Get instance IP
        instance_ip=$(
          openstack server show $INSTANCE_NAME -c addresses -f json | \
          jq -r '.addresses.auto_allocated_network[1]'
        )
        echo "instance_ip [$instance_ip]"
        if [[ "$instance_ip" == "null" ]]; then
          echo "::error ::Failed to retrieve $INSTANCE_NAME IP"
          exit 1
        fi
        echo "instance_ip=$instance_ip" >> $GITHUB_OUTPUT

        # Get instance password from tags
        instance_pwd=$(
          openstack server show $INSTANCE_NAME -c tags -f json | \
          jq -r '.tags[] | select(startswith("exoPw")) | sub("^exoPw:"; "")'
        )

        # Retry logic for SSH-based password retrieval
        if [[ -z "$instance_pwd" ]]; then
          # Since 'exoPw' tag may not yet set, attempt to directly retrieve the password using
          # the openstack endpoint local to the instance.
          function retrieve_password {
            instance_pwd=$(ssh \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o LogLevel=ERROR \
              exouser@$instance_ip \
              'curl --silent http://169.254.169.254/openstack/latest/password')
            echo "$instance_pwd"
          }
          echo "Password not found in tags, attempting to retrieve via SSH..."
          for attempt in {1..2}; do
            instance_pwd=$(retrieve_password)
            if [[ -n "$instance_pwd" ]]; then
              break
            fi
            echo "Retrying password retrieval ($attempt)..."
            sleep 20
          done
        fi
        if [[ -z "$instance_pwd" ]]; then
          echo "::error ::Failed to retrieve $INSTANCE_NAME password"
          exit 1
        fi
        echo "::add-mask::$instance_pwd"
        echo "instance_pwd=$instance_pwd" >> $GITHUB_OUTPUT
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
        INSTANCE_NAME: ${{ inputs.instance_name }}
